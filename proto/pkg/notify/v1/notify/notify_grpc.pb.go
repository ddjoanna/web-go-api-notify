// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: notify/notify.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotifyService_SendSms_FullMethodName                    = "/notify.v1.NotifyService/SendSms"
	NotifyService_SendBatchSms_FullMethodName               = "/notify.v1.NotifyService/SendBatchSms"
	NotifyService_SendMail_FullMethodName                   = "/notify.v1.NotifyService/SendMail"
	NotifyService_SendBatchMail_FullMethodName              = "/notify.v1.NotifyService/SendBatchMail"
	NotifyService_CancelScheduledByMessageId_FullMethodName = "/notify.v1.NotifyService/CancelScheduledByMessageId"
	NotifyService_ListStatusWithPaging_FullMethodName       = "/notify.v1.NotifyService/ListStatusWithPaging"
)

// NotifyServiceClient is the client API for NotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// 通知服務
type NotifyServiceClient interface {
	// 非流式 RPC：單筆或少量簡訊發送
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	// 流式 RPC：批量簡訊發送
	SendBatchSms(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendSmsRequest, SendSmsResponse], error)
	// 非流式 RPC：單筆或少量郵件發送
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error)
	// 流式 RPC：批量郵件發送
	SendBatchMail(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendMailRequest, SendMailResponse], error)
	// 取消預約訊息
	CancelScheduledByMessageId(ctx context.Context, in *CancelScheduledByMessageIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查詢發送狀態
	ListStatusWithPaging(ctx context.Context, in *ListStatusWithPagingRequest, opts ...grpc.CallOption) (*ListStatusWithPagingResponse, error)
}

type notifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyServiceClient(cc grpc.ClientConnInterface) NotifyServiceClient {
	return &notifyServiceClient{cc}
}

func (c *notifyServiceClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, NotifyService_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) SendBatchSms(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendSmsRequest, SendSmsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotifyService_ServiceDesc.Streams[0], NotifyService_SendBatchSms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendSmsRequest, SendSmsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotifyService_SendBatchSmsClient = grpc.BidiStreamingClient[SendSmsRequest, SendSmsResponse]

func (c *notifyServiceClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, NotifyService_SendMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) SendBatchMail(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendMailRequest, SendMailResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotifyService_ServiceDesc.Streams[1], NotifyService_SendBatchMail_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMailRequest, SendMailResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotifyService_SendBatchMailClient = grpc.BidiStreamingClient[SendMailRequest, SendMailResponse]

func (c *notifyServiceClient) CancelScheduledByMessageId(ctx context.Context, in *CancelScheduledByMessageIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotifyService_CancelScheduledByMessageId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) ListStatusWithPaging(ctx context.Context, in *ListStatusWithPagingRequest, opts ...grpc.CallOption) (*ListStatusWithPagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStatusWithPagingResponse)
	err := c.cc.Invoke(ctx, NotifyService_ListStatusWithPaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServiceServer is the server API for NotifyService service.
// All implementations must embed UnimplementedNotifyServiceServer
// for forward compatibility.
//
// *
// 通知服務
type NotifyServiceServer interface {
	// 非流式 RPC：單筆或少量簡訊發送
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	// 流式 RPC：批量簡訊發送
	SendBatchSms(grpc.BidiStreamingServer[SendSmsRequest, SendSmsResponse]) error
	// 非流式 RPC：單筆或少量郵件發送
	SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error)
	// 流式 RPC：批量郵件發送
	SendBatchMail(grpc.BidiStreamingServer[SendMailRequest, SendMailResponse]) error
	// 取消預約訊息
	CancelScheduledByMessageId(context.Context, *CancelScheduledByMessageIdRequest) (*emptypb.Empty, error)
	// 查詢發送狀態
	ListStatusWithPaging(context.Context, *ListStatusWithPagingRequest) (*ListStatusWithPagingResponse, error)
	mustEmbedUnimplementedNotifyServiceServer()
}

// UnimplementedNotifyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotifyServiceServer struct{}

func (UnimplementedNotifyServiceServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedNotifyServiceServer) SendBatchSms(grpc.BidiStreamingServer[SendSmsRequest, SendSmsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendBatchSms not implemented")
}
func (UnimplementedNotifyServiceServer) SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedNotifyServiceServer) SendBatchMail(grpc.BidiStreamingServer[SendMailRequest, SendMailResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendBatchMail not implemented")
}
func (UnimplementedNotifyServiceServer) CancelScheduledByMessageId(context.Context, *CancelScheduledByMessageIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScheduledByMessageId not implemented")
}
func (UnimplementedNotifyServiceServer) ListStatusWithPaging(context.Context, *ListStatusWithPagingRequest) (*ListStatusWithPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatusWithPaging not implemented")
}
func (UnimplementedNotifyServiceServer) mustEmbedUnimplementedNotifyServiceServer() {}
func (UnimplementedNotifyServiceServer) testEmbeddedByValue()                       {}

// UnsafeNotifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServiceServer will
// result in compilation errors.
type UnsafeNotifyServiceServer interface {
	mustEmbedUnimplementedNotifyServiceServer()
}

func RegisterNotifyServiceServer(s grpc.ServiceRegistrar, srv NotifyServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotifyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotifyService_ServiceDesc, srv)
}

func _NotifyService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyService_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_SendBatchSms_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotifyServiceServer).SendBatchSms(&grpc.GenericServerStream[SendSmsRequest, SendSmsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotifyService_SendBatchSmsServer = grpc.BidiStreamingServer[SendSmsRequest, SendSmsResponse]

func _NotifyService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyService_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_SendBatchMail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotifyServiceServer).SendBatchMail(&grpc.GenericServerStream[SendMailRequest, SendMailResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotifyService_SendBatchMailServer = grpc.BidiStreamingServer[SendMailRequest, SendMailResponse]

func _NotifyService_CancelScheduledByMessageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScheduledByMessageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).CancelScheduledByMessageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyService_CancelScheduledByMessageId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).CancelScheduledByMessageId(ctx, req.(*CancelScheduledByMessageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_ListStatusWithPaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusWithPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).ListStatusWithPaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyService_ListStatusWithPaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).ListStatusWithPaging(ctx, req.(*ListStatusWithPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyService_ServiceDesc is the grpc.ServiceDesc for NotifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notify.v1.NotifyService",
	HandlerType: (*NotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _NotifyService_SendSms_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _NotifyService_SendMail_Handler,
		},
		{
			MethodName: "CancelScheduledByMessageId",
			Handler:    _NotifyService_CancelScheduledByMessageId_Handler,
		},
		{
			MethodName: "ListStatusWithPaging",
			Handler:    _NotifyService_ListStatusWithPaging_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBatchSms",
			Handler:       _NotifyService_SendBatchSms_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendBatchMail",
			Handler:       _NotifyService_SendBatchMail_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notify/notify.proto",
}
